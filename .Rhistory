# Chunk 1
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
# Chunk 2
trainRaw <- read.csv("./dataset/pml-training.csv")
testRaw <- read.csv("./dataset/pml-testing.csv")
dim(trainRaw)
dim(testRaw)
# Chunk 3
sum(complete.cases(trainRaw))
# Chunk 4
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
# Chunk 5
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
# Chunk 6
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
# Chunk 7
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
# Chunk 8
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
# Chunk 9
accuracy <- postResample(predictRf, testData$classe)
accuracy
oose <- 1 - as.numeric(confusionMatrix(testData$classe, predictRf)$overall[1])
oose
# Chunk 10
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
# Chunk 11
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
# Chunk 12
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
# Chunk 1
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
# Chunk 2
trainRaw <- read.csv("./dataset/pml-training.csv")
